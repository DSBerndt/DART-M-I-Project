from math import *
from vpython import *


def test(collisionTime, energy, direction):
    actual_pi=3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342
    # SPECIAL TIME! 12,914,100 (Total) 2,635,200 (Month)
    # 
    # Needed Constants
    #
    G = 6.67e-11
    sun_mass = 1.989e30
    sun_earth_distance = 149597870000
    speed_of_earth = 2*actual_pi*sun_earth_distance/(3.15e7)
    sun_asteroid_distance = 2*sun_earth_distance
    speed_of_asteroid = 0
    #
    # Set up the displays
    #
    scene2 = canvas(title='Solar System',caption='Animated Display', center=vector(0,0,0), background=color.black)
    #
    # Make the radius of each object large enough to see them
    #
    earth_radius = 6371000
    asteroid = sphere(pos=vector(0,sun_asteroid_distance,0),radius=4.0e8,color=color.red)
    earth    = sphere(pos=vector(0,0,0),radius=6.371e8,color=color.cyan)
    sun      = sphere(pos=vector(0,0,0),radius=695.5e7,color=color.yellow)
    earth.rad = earth_radius
    #
    #
    asteroid.mass = 5e9
    earth.mass = 5.972e24
    sun.mass   = sun_mass
    #
    #
    earth_start_angle = (actual_pi/2)-(2*actual_pi*12914100/3.15e7)
    earth.pos = vector(sun_earth_distance*cos((earth_start_angle)+(2*actual_pi)/3.15e7),sun_earth_distance*sin((earth_start_angle)+(2*actual_pi)/3.15e7),0)
    asteroid.mom = asteroid.mass*vector(speed_of_asteroid,0,0)
    sun.mom = sun.mass*vector(0,0,0)
    #
    # Create a trail for the earth, and vectors for the force on the earth.
    # scale should be a number that lets is see the force arrow on the plot.
    #
    earth.trail = curve(color=color.white)
    earth.trail.append(pos=earth.pos)
    asteroid.trail = curve(color=color.white)
    asteroid.trail.append(pos=asteroid.pos)
    #
    earth.point = arrow(pos=earth.pos,color=earth.color,axis=-norm(earth.pos))
    asteroid.point = arrow(pos=asteroid.pos,color=asteroid.color,axis=-norm(asteroid.pos))
    scale = 3e-16
    #
    # Initial time is 0, and the time step is 15 minutes hours
    #
    t = 0
    dt = 15*60
    
    #Set the mass of the DART based upon the real world mission page

    DARTmass = 570
    
    # set the ast_ear_dis very high initially so the while loop will run
    ast_ear_dis = 200*earth.rad
    while ast_ear_dis >= earth.rad:
        
        rate(1000)
    #
        t += dt
    #  When it is the inputted collision time, change the asteroid's momentum based upon the energy 
        if t == collisionTime:
            DARTmom = sqrt(2*energy*DARTmass)*direction
            asteroid.mom = asteroid.mom + DARTmom
    #
    #  Forces
    #
        asteroid.force = -(norm(asteroid.pos)*G*asteroid.mass*sun.mass/mag2(asteroid.pos))
    #
    #  Update the momentum and position of the Earth and asteroid
    #
        asteroid.mom += asteroid.force*dt
        asteroid.pos += asteroid.mom*dt/asteroid.mass
    #  Set up the Earth's circular orbit
        earth.pos = vector(sun_earth_distance*cos((t)*(2*actual_pi)/3.15e7+earth_start_angle),sun_earth_distance*sin((t)*(2*actual_pi)/3.15e7+earth_start_angle),0)
        ast_ear_vector = earth.pos-asteroid.pos
    #
    #   Update the Earth's Momentum arrow
    #
        earth.trail.append(pos=earth.pos)
        earth.point.pos = earth.pos
        earth.point.axis = earth.pos*scale

        asteroid.trail.append(pos=asteroid.pos)
        asteroid.point.pos = asteroid.pos
        asteroid.point.axis = asteroid.force*scale

        ast_ear_dis = mag(ast_ear_vector)

        if ast_ear_dis <= earth.rad:
            #print("CRASH!")
            return True
        if mag(asteroid.pos) <= sun_earth_distance:
            #print("crossed")
            return False
    
    
#test
montht = 2635200 #seconds
dlist = [vector(0, 1, 0), vector(1, 0, 0), vector(-1, 0, 0)]
for d in dlist:
    tlist = [0.375*montht, 0.625*montht, 0.75*montht, 0.875*montht, 1*montht, 1.5*montht, 2*montht, 2.5*montht, 3*montht, 3.5*montht, 4*montht, 4.5*montht]
    for t in tlist:
        # This code will give us the lowest energy value that averts a crash rounded up to two sig figs
        Crashed = True
        e = 1e13
        while Crashed:
            e=e*10
            Crashed = test(t,e,d)
        Crashed = True
        e=e/10
        eold = e
        while Crashed:
            e=e+eold
            Crashed = test(t,e,d)
        Crashed = True
        e=e-eold
        eadd = eold/10
        while Crashed:
            Crashed = test(t,e,d)
            e += eadd
        e-=eadd
        print("time is: " + str(t) + ". e is: " + str(e) + ". d is: " + str(d) + ".")
