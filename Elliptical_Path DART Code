
from math import *
from vpython import *
import matplotlib.pyplot as plt
import numpy as np
#
# Needed Constants
#

sun_earth_distance = 149597870000
one_year = 3.15e7
speed_of_asteroid = 2*pi*sun_earth_distance/one_year*1.2
speed_of_earth = 2*pi*sun_earth_distance/one_year
cutting_point = 1000
DARTmass = 570
uenergy_for_DART = 1e18
#
# Set up the displays
#

scene2 = canvas(title='Earth orbiting the Sun',caption='Animated Display',
     center=vector(0,0,0), background=color.black)
#
# Make the radius of each object large enough to see them
#
earth = sphere(pos=vector(sun_earth_distance,0,0),radius=6.371e7,color=color.green)
sun   = sphere(pos=vector(0,0,0),radius=695.5e7,color=color.yellow)
asteroid = sphere(pos=vector(sun_earth_distance,0,0),radius=4.0e8,color=color.red)

#
G = 6.67e-11
#
earth.mass = 5.972e24
sun.mass   = 1.989e30
asteroid.mass = 5e9
#
#
earth.momentum = earth.mass*vector(0,speed_of_earth,0)
sun.momentum = sun.mass*vector(0,0,0)
asteroid.momentum = asteroid.mass*vector(0,speed_of_asteroid,0)
#
# Create a trail for the earth, and vectors for the force on the earth.
# scale should be a number that lets is see the force arrow on the plot.
#
earth.trail = curve(color=color.magenta)

asteroid.trail = curve(color=color.cyan)

#


#earth.point in unit vector

unit_vectore = -norm(earth.pos)
unit_vectora = -norm(asteroid.pos)
#
# Initial time is 0, and the time step is twelve hours
#

dt = 24*200#24*3600
#
# We will initially run for one year
#
earth.force = G*earth.mass*sun.mass/mag2(earth.pos)*unit_vectore
asteroid.force = G*asteroid.mass*sun.mass/mag2(asteroid.pos)*unit_vectora
a = earth.pos
b = asteroid.pos
c = earth.momentum
d = asteroid.momentum
time = 0
def awhilewhileloop(time_to_go, check):
    time = 0
    isCrashed = True
    theret = False
    while time < time_to_go:
        rate(100)
    #
        time += dt
    #
    #  Compute the force on the earth using our force function.
    #
        unit_vectore = -norm(earth.pos)
        unit_vectora = -norm(asteroid.pos)
        earth.force = G*earth.mass*sun.mass/mag2(earth.pos)*unit_vectore
        asteroid.force = G*asteroid.mass*sun.mass/mag2(asteroid.pos)*unit_vectora
    #
    #  Update the momentum and position of the Earth
    #
    
        earth.momentum = earth.momentum + earth.force*dt
        earth.pos = earth.pos+earth.momentum*dt/earth.mass
        if isCrashed:
            asteroid.momentum = asteroid.momentum + asteroid.force*dt +sqrt(2*uenergy_for_DART*DARTmass)*norm(asteroid.momentum).rotate(angle=radians(0))
            isCrashed = False
        else:
            asteroid.momentum = asteroid.momentum + asteroid.force*dt 
        asteroid.pos = asteroid.pos+asteroid.momentum*dt/asteroid.mass
    #
    #   Update the Earth's Momentum arrow
    #
        
        if check:
            earth.trail.append(pos=earth.pos)
            asteroid.trail.append(pos=asteroid.pos)
            ast_ear_vector = earth.pos-asteroid.pos
            if mag(ast_ear_vector)<earth.radius+1000:
                print("crash")
                theret = True
                break;
    return theret      
                
def reset():
    earth.pos = a
    asteroid.pos = b
    earth.momentum = c
    asteroid.momentum = d
    earth.trail.clear()
    asteroid.trail.clear()
    
time1 = np.array([])
energy = np.array([])
while cutting_point >= 100:
    earth.pos = vector(sun_earth_distance,0,0)
    asteroid.pos = vector(sun_earth_distance,0,0)
    earth.momentum = earth.mass*vector(0,speed_of_earth,0)
    asteroid.momentum = asteroid.mass*vector(0,speed_of_asteroid,0)
    awhilewhileloop(dt*cutting_point, False) 
    a = vector(earth.pos.x,earth.pos.y,earth.pos.z)
    b = vector(asteroid.pos.x,asteroid.pos.y,asteroid.pos.z)
    c = -vector(earth.momentum.x,earth.momentum.y,earth.momentum.z)
    d = -vector(asteroid.momentum.x,asteroid.momentum.y,asteroid.momentum.z)
    reset()
    doitagain = True
    print(a,'first')
    while doitagain:
        doitagain = awhilewhileloop(one_year*3, True)
        uenergy_for_DART = uenergy_for_DART + 0.2*uenergy_for_DART
        reset()
    cutting_point -=100
    print('energy',uenergy_for_DART)
    time1 = np.append(time1, time)
    energy = np.append(energy,uenergy_for_DART)
  
time1=time1/(3600*24*30.5)
plt.plot(time1, energy, 'o', color='black')

   
